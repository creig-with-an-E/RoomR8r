{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/googleMapsSearchBar.js\";\nimport React, { Component } from 'react';\nimport { SearchBar } from \"../components\";\nimport Script from \"react-load-script\";\n\nvar handleScriptLoad = function handleScriptLoad() {\n  alert(\"loaded\");\n  /***loads google script on load */\n  // Declare Options For Autocomplete\n\n  var options = {// types: ['(cities)'],\n  }; // Initialize Google Autocomplete\n\n  var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n  // place fields that are returned to just the address components.\n\n  autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n  autocomplete.addListener('place_changed', handlePlaceSelect);\n};\n\nvar handlePlaceSelect = function handlePlaceSelect() {\n  // Extract City From Address Object\n  var addressObject = autocomplete.getPlace();\n  var address = addressObject.address_components; // Check if address is valid\n\n  if (address) {\n    console.log(address); // this.setState(\n    // {\n    //   city: address[0].long_name,\n    // }\n    // );\n  }\n};\n\nvar GoogleMapsSearchBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoogleMapsSearchBar, _Component);\n\n  function GoogleMapsSearchBar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, GoogleMapsSearchBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleMapsSearchBar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      address: \"\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (input) {\n      _this.setState({\n        address: input\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(GoogleMapsSearchBar, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\",\n        onLoad: handleScriptLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        style: {\n          backgroundColor: \"#ddd\"\n        },\n        id: \"autocomplete\",\n        onChange: this.onChangeHandler,\n        placeholder: \"X5X-X5X\",\n        value: this.state.address,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GoogleMapsSearchBar;\n}(Component);\n\nexport default GoogleMapsSearchBar;","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/googleMapsSearchBar.js"],"names":["React","Component","SearchBar","Script","handleScriptLoad","alert","options","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","console","log","GoogleMapsSearchBar","input","setState","backgroundColor","onChangeHandler","state"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEA,SAAQC,SAAR,QAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAEA,IAAMC,gBAAgB,GAAC,SAAjBA,gBAAiB,GAAI;AACzBC,EAAAA,KAAK,CAAC,QAAD,CAAL;AACA;AACA;;AACA,MAAIC,OAAO,GAAG,CACZ;AADY,GAAd,CAJyB,CAOzB;;AACC,MAAIC,YAAY,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CAClBC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADkB,EAElBP,OAFkB,CAAnB,CARwB,CAazB;AACA;;AACAC,EAAAA,YAAY,CAACO,SAAb,CAAuB,CAAC,oBAAD,CAAvB,EAfyB,CAiBzB;;AACAP,EAAAA,YAAY,CAACQ,WAAb,CAAyB,eAAzB,EAA0CC,iBAA1C;AACC,CAnBH;;AAqBA,IAAMA,iBAAiB,GAAC,SAAlBA,iBAAkB,GAAI;AAC1B;AACA,MAAIC,aAAa,GAAGV,YAAY,CAACW,QAAb,EAApB;AACA,MAAIC,OAAO,GAAGF,aAAa,CAACG,kBAA5B,CAH0B,CAI1B;;AACA,MAAID,OAAJ,EAAa;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EADW,CAEX;AACA;AACA;AACA;AACA;AACD;AACF,CAbD;;IAeMI,mB;;;;;;;;;;;;;;;;;;4DACG;AACHJ,MAAAA,OAAO,EAAC;AADL,K;;sEAGS,UAACK,KAAD,EAAS;AACvB,YAAKC,QAAL,CAAc;AAACN,QAAAA,OAAO,EAACK;AAAT,OAAd;AACD,K;;;;;;;6BAEO;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAC,sGADN;AAEE,QAAA,MAAM,EAAEpB,gBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE,oBAAC,SAAD;AACE,QAAA,KAAK,EAAE;AAACsB,UAAAA,eAAe,EAAC;AAAjB,SADT;AAEE,QAAA,EAAE,EAAC,cAFL;AAGE,QAAA,QAAQ,EAAE,KAAKC,eAHjB;AAIE,QAAA,WAAW,EAAC,SAJd;AAKE,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWT,OALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AAcD;;;;EAvB+BlB,S;;AA0BlC,eAAesB,mBAAf","sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../components\"\nimport Script from \"react-load-script\"\n\nconst handleScriptLoad=()=>{\n  alert(\"loaded\")\n  /***loads google script on load */\n  // Declare Options For Autocomplete\n  let options = {\n    // types: ['(cities)'],\n  };\n  // Initialize Google Autocomplete\n   let autocomplete = new google.maps.places.Autocomplete(\n    document.getElementById('autocomplete'),\n    options,\n  );\n  \n  // Avoid paying for data that you don't need by restricting the set of\n  // place fields that are returned to just the address components.\n  autocomplete.setFields(['address_components']);\n  \n  // Fire Event when a suggested name is selected\n  autocomplete.addListener('place_changed', handlePlaceSelect);\n  }\n  \nconst handlePlaceSelect=()=>{\n  // Extract City From Address Object\n  let addressObject = autocomplete.getPlace();\n  let address = addressObject.address_components;\n  // Check if address is valid\n  if (address) {\n    console.log(address)\n    // this.setState(\n    // {\n    //   city: address[0].long_name,\n    // }\n    // );\n  }\n}\n\nclass GoogleMapsSearchBar extends Component{\n  state ={\n      address:\"\"\n  }\n  onChangeHandler=(input)=>{\n    this.setState({address:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={handleScriptLoad}\n        />\n        <SearchBar\n          style={{backgroundColor:\"#ddd\"}}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.address}\n        />\n      </div>)\n  }\n}\n\nexport default GoogleMapsSearchBar"]},"metadata":{},"sourceType":"module"}