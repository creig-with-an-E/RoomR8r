{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\n\nvar findByAddressStart = function findByAddressStart() {\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_START\n  };\n};\n\nvar findByAddressSuccess = function findByAddressSuccess(response) {\n  // iterating over response placing id as part of object\n  var arrayData = _Object$keys(response.data).map(function (key) {\n    return _objectSpread({}, response.data[key], {\n      id: key\n    });\n  });\n\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: {\n      data: arrayData\n    }\n  };\n};\n\nvar findByAddressFail = function findByAddressFail(error) {\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload: {\n      data: error\n    }\n  };\n};\n\nexport var findReviewByAddress = function findReviewByAddress(userToken, address) {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  return function (dispatch) {\n    dispatch(findByAddressStart());\n    axios.get(\"https://accomo-rater.firebaseio.com/landlord_data.json?auth=\".concat(userToken, \"&orderBy=\\\"postal_code\\\"&startAt=\\\"\").concat(address, \"\\\"&endAt=\\\"\").concat(address, \"\\\"\")).then(function (response) {\n      dispatch(findByAddressSuccess(response));\n    })[\"catch\"](function (error) {\n      dispatch(findByAddressFail(error));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/store/actions/appActions.js"],"names":["axios","actionTypes","findByAddressStart","type","SEARCH_BY_ADDRESS_START","findByAddressSuccess","response","arrayData","data","map","key","id","SEARCH_BY_ADDRESS_SUCCESS","payload","findByAddressFail","error","SEARCH_BY_ADDRESS_FAIL","findReviewByAddress","userToken","address","dispatch","get","then"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;;AAEA,IAAMC,kBAAkB,GAAC,SAAnBA,kBAAmB,GAAI;AAC3B;AACA;AACA;AACA,SAAO;AAACC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AAAnB,GAAP;AACD,CALD;;AAOA,IAAMC,oBAAoB,GAAC,SAArBA,oBAAqB,CAACC,QAAD,EAAY;AACrC;AACA,MAAMC,SAAS,GAAG,aAAYD,QAAQ,CAACE,IAArB,EAA2BC,GAA3B,CAA+B,UAAAC,GAAG,EAAI;AACtD,6BAAYJ,QAAQ,CAACE,IAAT,CAAcE,GAAd,CAAZ;AAAgCC,MAAAA,EAAE,EAAED;AAApC;AACC,GAFe,CAAlB;;AAGA,SAAO;AACLP,IAAAA,IAAI,EAAEF,WAAW,CAACW,yBADb;AAELC,IAAAA,OAAO,EAAE;AAAEL,MAAAA,IAAI,EAACD;AAAP;AAFJ,GAAP;AAID,CATD;;AAWA,IAAMO,iBAAiB,GAAC,SAAlBA,iBAAkB,CAACC,KAAD,EAAS;AAC/B,SAAO;AACLZ,IAAAA,IAAI,EAACF,WAAW,CAACe,sBADZ;AAELH,IAAAA,OAAO,EAAC;AAAEL,MAAAA,IAAI,EAAEO;AAAR;AAFH,GAAP;AAID,CALD;;AAOA,OAAO,IAAME,mBAAmB,GAAE,SAArBA,mBAAqB,CAACC,SAAD,EAAWC,OAAX,EAAuB;AACvD;AACA;AACA;AACA,SAAO,UAACC,QAAD,EAAY;AACjBA,IAAAA,QAAQ,CAAClB,kBAAkB,EAAnB,CAAR;AACAF,IAAAA,KAAK,CAACqB,GAAN,uEACEH,SADF,gDAC8CC,OAD9C,wBAEEA,OAFF,SAICG,IAJD,CAIM,UAAAhB,QAAQ,EAAI;AAChBc,MAAAA,QAAQ,CAACf,oBAAoB,CAACC,QAAD,CAArB,CAAR;AACD,KAND,WAOO,UAAAS,KAAK,EAAI;AACdK,MAAAA,QAAQ,CAACN,iBAAiB,CAACC,KAAD,CAAlB,CAAR;AACD,KATD;AAUD,GAZD;AAaC,CAjBI","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\"\n\nconst findByAddressStart=()=>{\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return {type: actionTypes.SEARCH_BY_ADDRESS_START}\n}\n\nconst findByAddressSuccess=(response)=>{\n  // iterating over response placing id as part of object\n  const arrayData = Object.keys(response.data).map(key => {\n    return { ...response.data[key], id: key };\n    });\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: { data:arrayData }\n  }\n}\n\nconst findByAddressFail=(error)=>{\n  return {\n    type:actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload:{ data: error }\n  }\n}\n\nexport const findReviewByAddress= (userToken,address) => {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  return (dispatch)=>{\n    dispatch(findByAddressStart())\n    axios.get(`https://accomo-rater.firebaseio.com/landlord_data.json?auth=${\n      userToken}&orderBy=\"postal_code\"&startAt=\"${address}\"&endAt=\"${\n      address }\"`\n    )\n    .then(response => {\n      dispatch(findByAddressSuccess(response))\n    })\n    .catch(error => {\n      dispatch(findByAddressFail(error))\n    });\n  }\n  };\n"]},"metadata":{},"sourceType":"module"}