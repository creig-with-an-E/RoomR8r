{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\";\n\nvar findByAddressStart = function findByAddressStart() {\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_START\n  };\n};\n\nvar findByAddressSuccess = function findByAddressSuccess(response) {\n  // iterating over response placing id as part of object\n  var arrayData = _Object$keys(response.data).map(function (key) {\n    return _objectSpread({}, response.data[key], {\n      id: key\n    });\n  });\n\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: {\n      data: arrayData\n    }\n  };\n};\n\nvar findByAddressFail = function findByAddressFail(error) {\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload: {\n      data: error\n    }\n  };\n};\n\nexport var findReviewByAddress = function findReviewByAddress(userToken, address) {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  console.log(address);\n  return function (dispatch) {\n    dispatch(findByAddressStart());\n    /*** searchParametersPassed: if search parameter is blank it returns all results\n     *   in the event parameter is passed, it returns relevant postal code results\n    */\n\n    var searchParametersPassed = address ? \"&orderBy=\\\"postal_code\\\"&startAt=\\\"\".concat(address, \"\\\"&endAt=\\\"\").concat(address, \"\\\"\") : \"\";\n    axios.get(\"https://accomo-rater.firebaseio.com/landlord_data.json?auth=\".concat(userToken).concat(searchParametersPassed)).then(function (response) {\n      console.log(response);\n      dispatch(findByAddressSuccess(response));\n    })[\"catch\"](function (error) {\n      dispatch(findByAddressFail(error));\n    });\n  };\n};\n/** resetting state */\n\nexport var resetApplicationState = function resetApplicationState() {\n  return {\n    type: actionTypes.RESET_APPLICATION_STATE\n  };\n};\nexport var createReview = function createReview(userToken, data) {\n  return function (dispatch) {\n    axios.post(\"https://accomo-rater.firebaseio.com/landlord_data.json?auth=\".concat(userToken), data).then(function (response) {\n      dispatch({\n        type: actionTypes.CREATE_REVIEW_SUCCESS,\n        payload: response.data\n      });\n    })[\"catch\"](function (error) {\n      dispatch({\n        type: actionTypes.CREATE_REVIEW_FAIL\n      });\n    });\n  };\n};\n/**functions for google maps auto complete */\n\nexport var setAddress = function setAddress(address) {\n  return {\n    type: actionTypes.SET_ADDRESS_OBJECT,\n    payload: address\n  };\n};\n/*******end of google maps functions********/\n\n/**start of review form functions**********/\n\nexport var setFormFields = function setFormFields(data) {\n  //  handles input change for landlord_form review component\n  return {\n    type: actionTypes.SET_REVIEW_FORM_FIELDS,\n    payload: data\n  };\n};\n/*************end of review form data***************************/","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/store/actions/appActions.js"],"names":["axios","actionTypes","findByAddressStart","type","SEARCH_BY_ADDRESS_START","findByAddressSuccess","response","arrayData","data","map","key","id","SEARCH_BY_ADDRESS_SUCCESS","payload","findByAddressFail","error","SEARCH_BY_ADDRESS_FAIL","findReviewByAddress","userToken","address","console","log","dispatch","searchParametersPassed","get","then","resetApplicationState","RESET_APPLICATION_STATE","createReview","post","CREATE_REVIEW_SUCCESS","CREATE_REVIEW_FAIL","setAddress","SET_ADDRESS_OBJECT","setFormFields","SET_REVIEW_FORM_FIELDS"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\"\n\nconst findByAddressStart=()=>{\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return { type: actionTypes.SEARCH_BY_ADDRESS_START }\n}\n\nconst findByAddressSuccess=(response)=>{\n  // iterating over response placing id as part of object\n  const arrayData = Object.keys(response.data).map(key => {\n    return { ...response.data[key], id: key };\n    });\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: { data:arrayData }\n  }\n}\n\nconst findByAddressFail=(error)=>{\n  return {\n    type:actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload:{ data: error }\n  }\n}\n\nexport const findReviewByAddress= (userToken,address) => {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  console.log(address)\n  return (dispatch)=>{\n    dispatch(findByAddressStart())\n    /*** searchParametersPassed: if search parameter is blank it returns all results\n     *   in the event parameter is passed, it returns relevant postal code results\n    */\n    const searchParametersPassed = address ?`&orderBy=\"postal_code\"&startAt=\"${address}\"&endAt=\"${\n      address }\"` :\"\"\n    axios.get(`https://accomo-rater.firebaseio.com/landlord_data.json?auth=${\n      userToken}${searchParametersPassed}`\n    )\n    .then(response => {\n      console.log(response)\n      dispatch(findByAddressSuccess(response))\n    })\n    .catch(error => {\n      dispatch(findByAddressFail(error))\n    });\n  }\n  };\n\n  /** resetting state */\n\n  export const resetApplicationState=()=>{\n    return{\n      type: actionTypes.RESET_APPLICATION_STATE\n    }\n  }\n\n  export const createReview =(userToken,data)=>{\n    return (dispatch)=>{\n      axios.post(`https://accomo-rater.firebaseio.com/landlord_data.json?auth=${userToken}`,data)\n       .then(response=>{\n        dispatch({\n          type: actionTypes.CREATE_REVIEW_SUCCESS,\n          payload: response.data\n        })\n      }).catch(error=>{\n        dispatch({\n          type:actionTypes.CREATE_REVIEW_FAIL\n        })\n      })\n    }\n  }\n  \n/**functions for google maps auto complete */\nexport const setAddress=(address)=>{\n  return {\n    type: actionTypes.SET_ADDRESS_OBJECT,\n    payload: address\n  }\n}\n\n/*******end of google maps functions********/ \n\n/**start of review form functions**********/ \nexport const setFormFields=(data)=>{\n  //  handles input change for landlord_form review component\n  return {\n    type: actionTypes.SET_REVIEW_FORM_FIELDS,\n    payload: data\n  }\n}\n\n/*************end of review form data***************************/ "]},"metadata":{},"sourceType":"module"}