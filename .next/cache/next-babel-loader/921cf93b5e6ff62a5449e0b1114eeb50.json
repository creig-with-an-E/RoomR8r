{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/stepper_components/googleMapsSearchBar.js\";\nimport React, { Component } from 'react';\nimport { SearchBar } from \"../../components\";\nimport Script from \"react-load-script\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { setAddress, resetApplicationState } from \"../../../store/actions/appActions\";\n\nclass GoogleMapsSearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleScriptLoad\", () => {\n      /***loads google script on load and \n       * declares the options for autocomplete */\n      const options = {\n        // types: ['(cities)'],\n        componentRestrictions: {\n          country: 'ca' //setting results to canada\n\n        }\n      }; // Initialize Google Autocomplete\n\n      const autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components.\n\n      autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n      autocomplete.addListener('place_changed', () => this.handlePlaceSelect(autocomplete));\n    });\n\n    _defineProperty(this, \"handlePlaceSelect\", autocomplete => {\n      // Extract City From Address Object\n      let addressObject = autocomplete.getPlace();\n      let address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        this.props.setAddressData(address);\n      }\n    });\n\n    _defineProperty(this, \"onChangeHandler\", (input, name = null) => {\n      /** handles the input change in search bar*/\n      this.setState({\n        queryString: input\n      });\n    });\n\n    this.state = {\n      queryString: \"\"\n    };\n    this.props.resetState();\n  }\n\n  componentDidMount() {\n    if (!this.props.userToken) {\n      Router.replace(\"/auth\");\n      return;\n    }\n\n    if (this.props.addressData) {\n      const {\n        street_number,\n        city,\n        province\n      } = this.props.addressData;\n      this.setState({\n        queryString: `${street_number},${city},${province}`\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // return\n    if (this.props.addressData !== prevProps.addressData) {\n      const {\n        street_number,\n        city,\n        province\n      } = this.props.addressData;\n      this.setState({\n        address: this.props.addressData,\n        queryString: `${street_number},${city},${province}`\n      });\n    }\n  }\n  /******start of google maps functions */\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), React.createElement(SearchBar, {\n      style: styles.searchBar,\n      id: \"autocomplete\",\n      onChange: this.onChangeHandler,\n      placeholder: \"1 First Ave NW\",\n      value: this.state.queryString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    addressData: state.app.stepperFormData.addressData,\n    userToken: state.auth.userToken\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAddressData: address => dispatch(setAddress(address)),\n    resetState: () => dispatch(resetApplicationState())\n  };\n};\n\nconst styles = {\n  searchBar: {\n    backgroundColor: \"#fffffa\",\n    width: \"320px\"\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleMapsSearchBar);","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/stepper_components/googleMapsSearchBar.js"],"names":["React","Component","SearchBar","Script","connect","Router","setAddress","resetApplicationState","GoogleMapsSearchBar","constructor","props","options","componentRestrictions","country","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","setAddressData","input","name","setState","queryString","state","resetState","componentDidMount","userToken","replace","addressData","street_number","city","province","componentDidUpdate","prevProps","prevState","render","handleScriptLoad","styles","searchBar","onChangeHandler","mapStateToProps","app","stepperFormData","auth","mapDispatchToProps","dispatch","backgroundColor","width"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../../components\"\nimport Script from \"react-load-script\"\nimport {connect} from \"react-redux\"\nimport Router from \"next/router\"\n\nimport {setAddress,resetApplicationState} from \"../../../store/actions/appActions\"\n\nclass GoogleMapsSearchBar extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      queryString:\"\",\n    }\n    this.props.resetState()\n  }\n  \n  componentDidMount(){\n    if(!this.props.userToken){\n      Router.replace(\"/auth\")\n      return\n    }\n    if(this.props.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    // return\n    if(this.props.addressData !== prevProps.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        address: this.props.addressData,\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  /******start of google maps functions */\n  handleScriptLoad=()=>{\n    /***loads google script on load and \n     * declares the options for autocomplete */\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}  //setting results to canada\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.props.setAddressData(address)\n    }\n  }\n  /** end of google maps functions ************/\n\n  onChangeHandler=(input, name=null)=>{\n    /** handles the input change in search bar*/ \n    this.setState({queryString:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={this.handleScriptLoad}\n        />\n        <SearchBar\n          style={styles.searchBar}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"1 First Ave NW\"\n          value={this.state.queryString}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps=(state)=>{\n  return{\n    addressData: state.app.stepperFormData.addressData,\n    userToken: state.auth.userToken\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    setAddressData:(address)=>dispatch(setAddress(address)),\n    resetState:()=>dispatch(resetApplicationState())\n  }\n}\n\nconst styles ={\n  searchBar:{\n    backgroundColor:\"#fffffa\",\n    width:\"320px\"\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(GoogleMapsSearchBar)"]},"metadata":{},"sourceType":"module"}