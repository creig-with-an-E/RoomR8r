{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/pages/index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { parseCookies } from \"../lib/parseCookies\";\nimport Script from 'react-load-script';\nimport { ReviewCard, Layout, Spinner, SearchBar } from \"../src/components\";\nimport AddReviewForm from \"../src/modal/addReviewForm\";\nimport * as appActions from \"../store/actions/appActions\";\nimport * as authActions from \"../store/actions/authActions\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"state\", {\n      address: \"\",\n      modalVisible: false,\n      searchInitiated: false,\n      //used as flag to check if user has attempted searching if so show no result \n      addressError: false\n    });\n\n    _defineProperty(this, \"handlePlaceSelect\", () => {\n      // Extract City From Address Object\n      let addressObject = this.autocomplete.getPlace();\n      let address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        // Set State\n        this.setState({\n          city: address[0].long_name,\n          address: addressObject.formatted_address\n        });\n      }\n    });\n\n    _defineProperty(this, \"onAddressChangeHandler\", input => {\n      //handles user input and stores in local state\n      const valid = this.isValidatePostalCode(input);\n\n      if (valid) {\n        const addDash = input.length === 3 ? `${input.slice(0, 3)}-${input.slice(3)}` : input;\n        this.setState({\n          addressError: false,\n          address: addDash.toUpperCase()\n        });\n        return;\n      }\n\n      this.setState({\n        addressError: !valid\n      });\n    });\n\n    _defineProperty(this, \"isValidatePostalCode\", input => {\n      // validates the postal code to fit canadian format of X1X-X1X\n      const val = input.split(\"\"); //storing the values in array\n\n      let valid = true;\n      let counter = 0;\n      val.forEach((element, index) => {\n        /******\n          counter used to keep track of spaces where value should be digit\n          even array index is alphabetic character and odd is numeric\n          counter is not incremented after 3 so as to add dash which is not counted\n        ******/\n        if (counter % 2 !== 0) {\n          if (element === \"-\") {\n            return;\n          } else {\n            counter++;\n            valid = valid && !isNaN(_parseInt(element));\n          }\n        } else {\n          counter++; // validates the strings are in the right place by canadian postal code format\n\n          valid = valid && /^[A-Za-z\\-]/.test(element);\n        }\n      });\n      return valid;\n    });\n\n    _defineProperty(this, \"searchByAddressHandler\", event => {\n      this.props.findByAddress(this.props.userToken, this.state.address);\n    });\n\n    _defineProperty(this, \"showModalHandle\", () => {\n      this.setState({\n        modalVisible: true\n      });\n    });\n\n    _defineProperty(this, \"hideModalHandle\", () => {\n      this.setState({\n        modalVisible: false\n      });\n    });\n\n    this.handleScriptLoad = this.handleScriptLoad.bind(this);\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.savedToken) {\n      Router.replace(\"/auth\");\n    } else {\n      this.props.updateSavedToken(this.props.savedToken);\n    }\n  }\n\n  handleScriptLoad() {\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {// types: ['(cities)'],\n    }; // Initialize Google Autocomplete\n\n    this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n\n    this.autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n  }\n\n  render() {\n    let cards = null;\n    /**\n     *  emptyResultsText: this is used to display feedback when empty list returned.\n     *  display of this warning is handled by state.showEmptyResultsWarning flag\n     * */\n\n    let emptyResultsText = \"\";\n\n    if (this.props.searchResults !== null && this.props.searchResults.length > 0) {\n      cards = this.props.searchResults ? this.props.searchResults.map(element => React.createElement(ReviewCard, {\n        data: element,\n        key: element.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      })) : null;\n    } else if (this.props.searchResults) {\n      /*** this handle the empty array case where no results where found**/\n      if (this.props.searchResults.length === 0) {\n        emptyResultsText = React.createElement(\"p\", {\n          style: styles.noResultsStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"Currently no reviews exist for this postal code\");\n      }\n    }\n\n    const spinner = !this.props.loading ? null : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    });\n    /***  showModal handle is passed down to Layout ***/\n\n    return React.createElement(Layout, {\n      showModalHandle: this.showModalHandle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\",\n      onLoad: this.handleScriptLoad,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(AddReviewForm, {\n      userToken: this.props.userToken,\n      modalVisible: this.state.modalVisible,\n      hideModalHandle: this.hideModalHandle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      style: styles.sectionStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      style: styles.headerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"Because not all landlords are built the same\"), React.createElement(SearchBar, {\n      id: \"autocomplete\",\n      invalid: this.state.addressError ? true : false,\n      placeholder: \"X5X-X5X\",\n      value: this.state.address // onChange={this.onAddressChangeHandler}\n      ,\n      onRequestSearch: this.searchByAddressHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: styles.errorStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \" \", this.state.addressError ? \"Acceptable format is X9X-9X9\" : \"\", \" \"), React.createElement(\"p\", {\n      style: styles.searchHeading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Search for reviews by Postal Code\"), spinner, emptyResultsText, React.createElement(\"div\", {\n      style: {\n        width: \"100%\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, cards)));\n  }\n\n}\n\n_defineProperty(App, \"getInitialProps\", ({\n  req\n}) => {\n  const cookie = parseCookies(req);\n  return {\n    savedToken: cookie.userToken\n  };\n});\n\nconst styles = {\n  headerStyle: {\n    marginTop: \"80px\",\n    fontSize: 22,\n    color: \"rgb(44,54,94)\",\n    textAlign: \"center\",\n    fontFamily: 'Poppins, sans-serif',\n    fontWeight: \"bold\"\n  },\n  sectionStyle: {\n    overflowY: \"scroll\",\n    alignSelf: \"center\",\n    marginTop: \"5px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    width: \"100%\"\n  },\n  searchHeading: {\n    fontSize: 16,\n    marginTop: 20,\n    color: \"rgb(44,54,94)\",\n    fontWeight: \"bold\",\n    fontFamily: \"Poppins, sans serif\"\n  },\n  errorStyle: {\n    color: \"rgb(255,89,65)\",\n    fontWeight: \"bold\",\n    fontFamily: \"Poppins, sans serif\"\n  },\n  noResultsStyle: {\n    color: \"rgb(255,89,65)\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    fontFamily: \"Fira Sans, sans serif\"\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    userToken: state.auth.userToken,\n    searchResults: state.app.searchResults,\n    loading: state.app.loading\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateSavedToken: token => dispatch(authActions.updateSavedToken(token)),\n    findByAddress: (userToken, address) => dispatch(appActions.findReviewByAddress(userToken, address))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/pages/index.js"],"names":["React","Component","connect","Router","parseCookies","Script","ReviewCard","Layout","Spinner","SearchBar","AddReviewForm","appActions","authActions","App","constructor","props","address","modalVisible","searchInitiated","addressError","addressObject","autocomplete","getPlace","address_components","setState","city","long_name","formatted_address","input","valid","isValidatePostalCode","addDash","length","slice","toUpperCase","val","split","counter","forEach","element","index","isNaN","test","event","findByAddress","userToken","state","handleScriptLoad","bind","handlePlaceSelect","componentDidMount","savedToken","replace","updateSavedToken","options","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","render","cards","emptyResultsText","searchResults","map","id","styles","noResultsStyle","spinner","loading","showModalHandle","hideModalHandle","sectionStyle","headerStyle","searchByAddressHandler","errorStyle","searchHeading","width","req","cookie","marginTop","fontSize","color","textAlign","fontFamily","fontWeight","overflowY","alignSelf","padding","mapStateToProps","auth","app","mapDispatchToProps","dispatch","token","findReviewByAddress"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from \"react-redux\"\nimport Router from \"next/router\"\nimport {parseCookies} from \"../lib/parseCookies\"\nimport Script from 'react-load-script';\n\nimport {ReviewCard, Layout, Spinner, SearchBar } from \"../src/components\"\nimport AddReviewForm from \"../src/modal/addReviewForm\"\nimport * as appActions from \"../store/actions/appActions\"\nimport * as authActions from \"../store/actions/authActions\"\n\nclass App extends Component {\n  static getInitialProps=({req})=>{\n    const cookie = parseCookies(req)\n    return {\n      savedToken: cookie.userToken\n    }\n  }\n\n  constructor(props){\n    super(props)\n    this.handleScriptLoad = this.handleScriptLoad.bind(this)\n    this.handlePlaceSelect = this.handlePlaceSelect.bind(this)\n  }\n\n  componentDidMount(){\n    if(!this.props.savedToken){\n      Router.replace(\"/auth\")\n    }else{\n      this.props.updateSavedToken(this.props.savedToken)\n    }\n  }\n\n  state = {\n    address: \"\",\n    modalVisible: false,\n    searchInitiated: false, //used as flag to check if user has attempted searching if so show no result \n    addressError:false,\n  };\n\n  handleScriptLoad(){\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {\n      // types: ['(cities)'],\n    };\n\n    // Initialize Google Autocomplete\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n\n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    this.autocomplete.setFields(['address_components']);\n\n    // Fire Event when a suggested name is selected\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n  }\n\n  handlePlaceSelect=()=> {\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n    let address = addressObject.address_components;\n\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState(\n        {\n          city: address[0].long_name,\n          address: addressObject.formatted_address,\n        }\n      );\n    }\n  }\n\n  onAddressChangeHandler = input => {\n    //handles user input and stores in local state\n    const valid = this.isValidatePostalCode(input)\n      if(valid){\n      const addDash = input.length===3 ? `${input.slice(0,3)}-${input.slice(3)}`:input\n      this.setState({\n       addressError:false,\n       address: addDash.toUpperCase()\n    })\n    return\n    }\n    this.setState({addressError:!valid})\n  };\n\n  isValidatePostalCode=(input)=>{\n    // validates the postal code to fit canadian format of X1X-X1X\n    const val = input.split(\"\") //storing the values in array\n    let valid = true\n    let counter = 0\n    val.forEach((element,index)=>{\n      /******\n        counter used to keep track of spaces where value should be digit\n        even array index is alphabetic character and odd is numeric\n        counter is not incremented after 3 so as to add dash which is not counted\n      ******/\n      if((counter % 2) !== 0){\n        if(element === \"-\"){\n          return\n        }else{\n          counter++\n          valid = valid && !isNaN(parseInt(element)) \n        }    \n      }else{\n        counter++\n        // validates the strings are in the right place by canadian postal code format\n        valid = valid && /^[A-Za-z\\-]/.test(element)\n      }\n    })\n    return valid\n  }\n  searchByAddressHandler = event => {\n    this.props.findByAddress(this.props.userToken, this.state.address)\n  }\n\n  showModalHandle=()=>{\n    this.setState({modalVisible: true})\n  }\n\n  hideModalHandle=()=>{\n    this.setState({modalVisible: false})\n  } \n  render() {\n    let cards = null\n    /**\n     *  emptyResultsText: this is used to display feedback when empty list returned.\n     *  display of this warning is handled by state.showEmptyResultsWarning flag\n     * */ \n    let emptyResultsText = \"\"\n    if(this.props.searchResults !== null && this.props.searchResults.length > 0){\n      cards= this.props.searchResults ? this.props.searchResults.map(element=><ReviewCard data={element} key={element.id} />): null\n    }else if(this.props.searchResults){\n      /*** this handle the empty array case where no results where found**/ \n      if(this.props.searchResults.length === 0){\n        emptyResultsText = <p style={styles.noResultsStyle}>Currently no reviews exist for this postal code</p>\n      }\n    }\n    const spinner = !this.props.loading ? null : <Spinner />;\n    /***  showModal handle is passed down to Layout ***/\n    return (\n      <Layout showModalHandle={this.showModalHandle}>\n        {/* loading google maps script */}\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n            onLoad={this.handleScriptLoad}\n          />   \n        <AddReviewForm \n            userToken={this.props.userToken}\n            modalVisible={this.state.modalVisible}\n            hideModalHandle={this.hideModalHandle}>\n        </AddReviewForm>\n        <section style={styles.sectionStyle}>\n        <h2 style={styles.headerStyle}>\n            Because not all landlords are built the same\n          </h2>\n          <SearchBar\n            id=\"autocomplete\"\n            invalid={this.state.addressError ? true : false}\n            placeholder=\"X5X-X5X\"\n            value={this.state.address}\n            // onChange={this.onAddressChangeHandler}\n            onRequestSearch={this.searchByAddressHandler}\n          />\n          <p style={styles.errorStyle}> {this.state.addressError ? \"Acceptable format is X9X-9X9\" : \"\"} </p>\n          <p style={styles.searchHeading}>Search for reviews by Postal Code</p>\n          {spinner}\n          {emptyResultsText}\n        <div style={{ width:\"100%\"}}>{cards}</div>\n        </section>            \n      </Layout>\n    );\n  }\n}\n\nconst styles = {\n  headerStyle:{\n    marginTop:\"80px\",\n    fontSize: 22,\n    color: \"rgb(44,54,94)\",\n    textAlign: \"center\",\n    fontFamily:'Poppins, sans-serif',\n    fontWeight:\"bold\"\n  },\n  sectionStyle:{\n    overflowY:\"scroll\",\n    alignSelf:\"center\",\n    marginTop:\"5px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    width:\"100%\"\n  },\n  searchHeading:{\n    fontSize:16,\n    marginTop:20,\n    color: \"rgb(44,54,94)\", \n    fontWeight:\"bold\",\n    fontFamily:\"Poppins, sans serif\"\n  },\n  errorStyle:{\n    color:\"rgb(255,89,65)\",\n    fontWeight:\"bold\",\n    fontFamily:\"Poppins, sans serif\"\n  },\n  noResultsStyle:{\n    color:\"rgb(255,89,65)\",\n    fontSize:20,\n    fontWeight:\"bold\",\n    fontFamily:\"Fira Sans, sans serif\"\n  }\n};\n\nconst mapStateToProps=(state)=>{\n  return{\n    userToken: state.auth.userToken,\n    searchResults:state.app.searchResults,\n    loading: state.app.loading\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    updateSavedToken:(token)=>dispatch(authActions.updateSavedToken(token)),\n    findByAddress:(userToken,address)=>dispatch(appActions.findReviewByAddress(userToken,address))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}