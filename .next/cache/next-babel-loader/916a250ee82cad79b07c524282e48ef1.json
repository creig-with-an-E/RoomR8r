{"ast":null,"code":"export const handleScriptLoad = () => {\n  /***loads google script on load */\n  // Declare Options For Autocomplete\n  const options = {// types: ['(cities)'],\n  };\n  const val = document.getElementById('autocomplete');\n  alert(val.getValue()); // Initialize Google Autocomplete\n\n  const autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n  // place fields that are returned to just the address components.\n\n  autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n  autocomplete.addListener('place_changed', () => alert(\"chansk\"));\n};\nexport const handlePlaceSelect = () => {\n  // Extract City From Address Object\n  let addressObject = autocomplete.getPlace();\n  let address = addressObject.address_components; // Check if address is valid\n\n  if (address) {\n    console.log(address); // this.setState(\n    // {\n    //   city: address[0].long_name,\n    // }\n    // );\n  }\n};","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/lib/googlePlaceFunctions.js"],"names":["handleScriptLoad","options","val","document","getElementById","alert","getValue","autocomplete","google","maps","places","Autocomplete","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","console","log"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAC,MAAI;AAC9B;AACA;AACA,QAAMC,OAAO,GAAG,CACd;AADc,GAAhB;AAGA,QAAMC,GAAG,GAAEC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAX;AACAC,EAAAA,KAAK,CAACH,GAAG,CAACI,QAAJ,EAAD,CAAL,CAP8B,CAQ9B;;AACC,QAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CACpBR,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADoB,EAEpBH,OAFoB,CAArB,CAT6B,CAc9B;AACA;;AACAM,EAAAA,YAAY,CAACK,SAAb,CAAuB,CAAC,oBAAD,CAAvB,EAhB8B,CAkB9B;;AACAL,EAAAA,YAAY,CAACM,WAAb,CAAyB,eAAzB,EAA0C,MAAIR,KAAK,CAAC,QAAD,CAAnD;AACC,CApBE;AAsBP,OAAO,MAAMS,iBAAiB,GAAC,MAAK;AAChC;AACA,MAAIC,aAAa,GAAGR,YAAY,CAACS,QAAb,EAApB;AACA,MAAIC,OAAO,GAAGF,aAAa,CAACG,kBAA5B,CAHgC,CAKhC;;AACA,MAAID,OAAJ,EAAa;AACXE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EADW,CAEX;AACA;AACA;AACA;AACA;AACD;AACA,CAdE","sourcesContent":["export const handleScriptLoad=()=>{\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {\n      // types: ['(cities)'],\n    };\n    const val =document.getElementById('autocomplete')\n    alert(val.getValue())\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>alert(\"chansk\"));\n    }\n    \nexport const handlePlaceSelect=()=> {\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      console.log(address)\n      // this.setState(\n      // {\n      //   city: address[0].long_name,\n      // }\n      // );\n    }\n    }"]},"metadata":{},"sourceType":"module"}