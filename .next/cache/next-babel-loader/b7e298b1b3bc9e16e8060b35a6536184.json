{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/stepper_components/googleMapsSearchBar.js\";\nimport React, { Component } from 'react';\nimport { SearchBar } from \"../../components\";\nimport Script from \"react-load-script\";\nimport { connect } from \"react-redux\";\nimport { setAddress, resetApplicationState } from \"../../../store/actions/appActions\";\n\nvar GoogleMapsSearchBar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GoogleMapsSearchBar, _Component);\n\n  function GoogleMapsSearchBar(props) {\n    var _this;\n\n    _classCallCheck(this, GoogleMapsSearchBar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GoogleMapsSearchBar).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScriptLoad\", function () {\n      /***loads google script on load and \n       * declares the options for autocomplete */\n      var options = {\n        // types: ['(cities)'],\n        componentRestrictions: {\n          country: 'ca' //setting results to canada\n\n        }\n      }; // Initialize Google Autocomplete\n\n      var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components.\n\n      autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n      autocomplete.addListener('place_changed', function () {\n        return _this.handlePlaceSelect(autocomplete);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlaceSelect\", function (autocomplete) {\n      // Extract City From Address Object\n      var addressObject = autocomplete.getPlace();\n      var address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        _this.props.setAddressData(address);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeHandler\", function (input) {\n      var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      /** handles the input change in search bar*/\n      _this.setState({\n        queryString: input\n      });\n    });\n\n    _this.state = {\n      queryString: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(GoogleMapsSearchBar, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.addressData) {\n        var _this$props$addressDa = this.props.addressData,\n            street_number = _this$props$addressDa.street_number,\n            city = _this$props$addressDa.city,\n            province = _this$props$addressDa.province;\n        this.setState({\n          queryString: \"\".concat(street_number, \",\").concat(city, \",\").concat(province)\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      // return\n      if (this.props.addressData !== prevProps.addressData) {\n        var _this$props$addressDa2 = this.props.addressData,\n            street_number = _this$props$addressDa2.street_number,\n            city = _this$props$addressDa2.city,\n            province = _this$props$addressDa2.province;\n        this.setState({\n          address: this.props.addressData,\n          queryString: \"\".concat(street_number, \",\").concat(city, \",\").concat(province)\n        });\n      }\n    }\n    /******start of google maps functions */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\",\n        onLoad: this.handleScriptLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(SearchBar, {\n        style: styles.searchBar,\n        id: \"autocomplete\",\n        onChange: this.onChangeHandler,\n        placeholder: \"X5X-X5X\",\n        value: this.state.queryString,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GoogleMapsSearchBar;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    addressData: state.app.stepperFormData.addressData\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    setAddressData: function setAddressData(address) {\n      return dispatch(setAddress(address));\n    },\n    resetState: function resetState() {\n      return dispatch(resetApplicationState());\n    }\n  };\n};\n\nvar styles = {\n  searchBar: {\n    backgroundColor: \"#fffffa\",\n    width: \"320px\"\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GoogleMapsSearchBar);","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/stepper_components/googleMapsSearchBar.js"],"names":["React","Component","SearchBar","Script","connect","setAddress","resetApplicationState","GoogleMapsSearchBar","props","options","componentRestrictions","country","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","setAddressData","input","name","setState","queryString","state","addressData","street_number","city","province","prevProps","prevState","handleScriptLoad","styles","searchBar","onChangeHandler","mapStateToProps","app","stepperFormData","mapDispatchToProps","dispatch","resetState","backgroundColor","width"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../../components\"\nimport Script from \"react-load-script\"\nimport {connect} from \"react-redux\"\n\nimport {setAddress,resetApplicationState} from \"../../../store/actions/appActions\"\n\nclass GoogleMapsSearchBar extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      queryString:\"\",\n    }\n\n  }\n  componentDidMount(){\n    if(this.props.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    // return\n    if(this.props.addressData !== prevProps.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        address: this.props.addressData,\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  /******start of google maps functions */\n  handleScriptLoad=()=>{\n    /***loads google script on load and \n     * declares the options for autocomplete */\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}  //setting results to canada\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.props.setAddressData(address)\n    }\n  }\n  /** end of google maps functions ************/\n\n  onChangeHandler=(input, name=null)=>{\n    /** handles the input change in search bar*/ \n    this.setState({queryString:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={this.handleScriptLoad}\n        />\n        <SearchBar\n          style={styles.searchBar}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.queryString}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps=(state)=>{\n  return{\n    addressData: state.app.stepperFormData.addressData\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    setAddressData:(address)=>dispatch(setAddress(address)),\n    resetState:()=>dispatch(resetApplicationState())\n  }\n}\n\nconst styles ={\n  searchBar:{\n    backgroundColor:\"#fffffa\",\n    width:\"320px\"\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(GoogleMapsSearchBar)"]},"metadata":{},"sourceType":"module"}