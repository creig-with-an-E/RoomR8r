{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/googleMapsSearchBar.js\";\nimport React, { Component } from 'react';\nimport { SearchBar } from \"../components\";\n\nclass GoogleMapsSearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleScriptLoad\", () => {\n      /***loads google script on load */\n      // Declare Options For Autocomplete\n      options = {// types: ['(cities)'],\n      }; // Initialize Google Autocomplete\n\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components.\n\n      autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n      autocomplete.addListener('place_changed', handlePlaceSelect);\n    });\n\n    _defineProperty(this, \"handlePlaceSelect\", () => {\n      // Extract City From Address Object\n      let addressObject = autocomplete.getPlace();\n      let address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        console.log(address); // this.setState(\n        // {\n        //   city: address[0].long_name,\n        // }\n        // );\n      }\n    });\n\n    _defineProperty(this, \"state\", {\n      address: \"\"\n    });\n\n    _defineProperty(this, \"onChangeHandler\", input => {\n      this.setState({\n        address: input\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(SearchBar, {\n      id: \"autocomplete\",\n      onChange: this.onChangeHandler,\n      placeholder: \"X5X-X5X\",\n      value: this.state.address,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GoogleMapsSearchBar;","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/src/stepper/googleMapsSearchBar.js"],"names":["React","Component","SearchBar","GoogleMapsSearchBar","options","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","console","log","input","setState","render","onChangeHandler","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEA,SAAQC,SAAR,QAAwB,eAAxB;;AAEA,MAAMC,mBAAN,SAAkCF,SAAlC,CAA2C;AAAA;AAAA;;AAAA,8CAExB,MAAI;AACnB;AACA;AACAG,MAAAA,OAAO,GAAG,CACR;AADQ,OAAV,CAHmB,CAMnB;;AACC,WAAKC,YAAL,GAAoB,IAAIC,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CACnBC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADmB,EAEnBP,OAFmB,CAApB,CAPkB,CAYnB;AACA;;AACAC,MAAAA,YAAY,CAACO,SAAb,CAAuB,CAAC,oBAAD,CAAvB,EAdmB,CAgBnB;;AACAP,MAAAA,YAAY,CAACQ,WAAb,CAAyB,eAAzB,EAA0CC,iBAA1C;AACC,KApBsC;;AAAA,+CAsBvB,MAAI;AACpB;AACA,UAAIC,aAAa,GAAGV,YAAY,CAACW,QAAb,EAApB;AACA,UAAIC,OAAO,GAAGF,aAAa,CAACG,kBAA5B,CAHoB,CAKpB;;AACA,UAAID,OAAJ,EAAa;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EADW,CAEX;AACA;AACA;AACA;AACA;AACD;AACA,KApCsC;;AAAA,mCAqClC;AACHA,MAAAA,OAAO,EAAC;AADL,KArCkC;;AAAA,6CAwCxBI,KAAD,IAAS;AACvB,WAAKC,QAAL,CAAc;AAACL,QAAAA,OAAO,EAACI;AAAT,OAAd;AACD,KA1CwC;AAAA;;AA4CzCE,EAAAA,MAAM,GAAE;AACN,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AACE,MAAA,EAAE,EAAC,cADL;AAEE,MAAA,QAAQ,EAAE,KAAKC,eAFjB;AAGE,MAAA,WAAW,EAAC,SAHd;AAIE,MAAA,KAAK,EAAE,KAAKC,KAAL,CAAWR,OAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AASD;;AAtDwC;;AAyD3C,eAAed,mBAAf","sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../components\"\n\nclass GoogleMapsSearchBar extends Component{\n\n  handleScriptLoad=()=>{\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    options = {\n      // types: ['(cities)'],\n    };\n    // Initialize Google Autocomplete\n     this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', handlePlaceSelect);\n    }\n    \n  handlePlaceSelect=()=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      console.log(address)\n      // this.setState(\n      // {\n      //   city: address[0].long_name,\n      // }\n      // );\n    }\n    }\n  state ={\n      address:\"\"\n  }\n  onChangeHandler=(input)=>{\n    this.setState({address:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <SearchBar\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.address}\n        />\n      </div>)\n  }\n}\n\nexport default GoogleMapsSearchBar"]},"metadata":{},"sourceType":"module"}