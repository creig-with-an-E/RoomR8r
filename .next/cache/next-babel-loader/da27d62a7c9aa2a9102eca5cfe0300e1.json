{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/fortunephiri/Documents/Projects/roomR8r/pages/index.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Router from \"next/router\";\nimport { parseCookies } from \"../lib/parseCookies\";\nimport Script from 'react-load-script';\nimport { ReviewCard, Layout, Spinner, SearchBar } from \"../src/components\";\nimport AddReviewForm from \"../src/modal/addReviewForm\";\nimport * as appActions from \"../store/actions/appActions\";\nimport * as authActions from \"../store/actions/authActions\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      address: \"\",\n      modalVisible: false,\n      searchInitiated: false,\n      //used as flag to check if user has attempted searching if so show no result \n      addressError: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScriptLoad\", function () {\n      /***loads google script on load */\n      // Declare Options For Autocomplete\n      var options = {// types: ['(cities)'],\n      }; // Initialize Google Autocomplete\n\n      _this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components.\n\n      _this.autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n\n      _this.autocomplete.addListener('place_changed', _this.handlePlaceSelect);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlaceSelect\", function () {\n      // Extract City From Address Object\n      var addressObject = _this.autocomplete.getPlace();\n\n      var address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        // Set State\n        _this.setState({\n          city: address[0].long_name,\n          query: addressObject.formatted_address\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddressChangeHandler\", function (input) {\n      //handles user input and stores in local state\n      var valid = _this.isValidatePostalCode(input);\n\n      if (valid) {\n        var addDash = input.length === 3 ? \"\".concat(input.slice(0, 3), \"-\").concat(input.slice(3)) : input;\n\n        _this.setState({\n          addressError: false,\n          address: addDash.toUpperCase()\n        });\n\n        return;\n      }\n\n      _this.setState({\n        addressError: !valid\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isValidatePostalCode\", function (input) {\n      // validates the postal code to fit canadian format of X1X-X1X\n      var val = input.split(\"\"); //storing the values in array\n\n      var valid = true;\n      var counter = 0;\n      val.forEach(function (element, index) {\n        /******\n          counter used to keep track of spaces where value should be digit\n          even array index is alphabetic character and odd is numeric\n          counter is not incremented after 3 so as to add dash which is not counted\n        ******/\n        if (counter % 2 !== 0) {\n          if (element === \"-\") {\n            return;\n          } else {\n            counter++;\n            valid = valid && !isNaN(_parseInt(element));\n          }\n        } else {\n          counter++; // validates the strings are in the right place by canadian postal code format\n\n          valid = valid && /^[A-Za-z\\-]/.test(element);\n        }\n      });\n      return valid;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"searchByAddressHandler\", function (event) {\n      _this.props.findByAddress(_this.props.userToken, _this.state.address);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showModalHandle\", function () {\n      _this.setState({\n        modalVisible: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"hideModalHandle\", function () {\n      _this.setState({\n        modalVisible: false\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.savedToken) {\n        Router.replace(\"/auth\");\n      } else {\n        this.props.updateSavedToken(this.props.savedToken);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cards = null;\n      /**\n       *  emptyResultsText: this is used to display feedback when empty list returned.\n       *  display of this warning is handled by state.showEmptyResultsWarning flag\n       * */\n\n      var emptyResultsText = \"\";\n\n      if (this.props.searchResults !== null && this.props.searchResults.length > 0) {\n        cards = this.props.searchResults ? this.props.searchResults.map(function (element) {\n          return React.createElement(ReviewCard, {\n            data: element,\n            key: element.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          });\n        }) : null;\n      } else if (this.props.searchResults) {\n        /*** this handle the empty array case where no results where found**/\n        if (this.props.searchResults.length === 0) {\n          emptyResultsText = React.createElement(\"p\", {\n            style: styles.noResultsStyle,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, \"Currently no reviews exist for this postal code\");\n        }\n      }\n\n      var spinner = !this.props.loading ? null : React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      });\n      /***  showModal handle is passed down to Layout ***/\n\n      return React.createElement(Layout, {\n        showModalHandle: this.showModalHandle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Script, {\n        url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\",\n        onLoad: this.handleScriptLoad,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(AddReviewForm, {\n        userToken: this.props.userToken,\n        modalVisible: this.state.modalVisible,\n        hideModalHandle: this.hideModalHandle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"section\", {\n        style: styles.sectionStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        style: styles.headerStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Because not all landlords are built the same\"), React.createElement(SearchBar, {\n        id: \"autocomplete\",\n        invalid: this.state.addressError ? true : false,\n        placeholder: \"X5X-X5X\",\n        value: this.state.address // onChange={this.onAddressChangeHandler}\n        ,\n        onRequestSearch: this.searchByAddressHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: styles.errorStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \" \", this.state.addressError ? \"Acceptable format is X9X-9X9\" : \"\", \" \"), React.createElement(\"p\", {\n        style: styles.searchHeading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Search for reviews by Postal Code\"), spinner, emptyResultsText, React.createElement(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, cards)));\n    }\n  }]);\n\n  return App;\n}(Component);\n\n_defineProperty(App, \"getInitialProps\", function (_ref) {\n  var req = _ref.req;\n  var cookie = parseCookies(req);\n  return {\n    savedToken: cookie.userToken\n  };\n});\n\nvar styles = {\n  headerStyle: {\n    marginTop: \"80px\",\n    fontSize: 22,\n    color: \"rgb(44,54,94)\",\n    textAlign: \"center\",\n    fontFamily: 'Poppins, sans-serif',\n    fontWeight: \"bold\"\n  },\n  sectionStyle: {\n    overflowY: \"scroll\",\n    alignSelf: \"center\",\n    marginTop: \"5px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    width: \"100%\"\n  },\n  searchHeading: {\n    fontSize: 16,\n    marginTop: 20,\n    color: \"rgb(44,54,94)\",\n    fontWeight: \"bold\",\n    fontFamily: \"Poppins, sans serif\"\n  },\n  errorStyle: {\n    color: \"rgb(255,89,65)\",\n    fontWeight: \"bold\",\n    fontFamily: \"Poppins, sans serif\"\n  },\n  noResultsStyle: {\n    color: \"rgb(255,89,65)\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    fontFamily: \"Fira Sans, sans serif\"\n  }\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    userToken: state.auth.userToken,\n    searchResults: state.app.searchResults,\n    loading: state.app.loading\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    updateSavedToken: function updateSavedToken(token) {\n      return dispatch(authActions.updateSavedToken(token));\n    },\n    findByAddress: function findByAddress(userToken, address) {\n      return dispatch(appActions.findReviewByAddress(userToken, address));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/pages/index.js"],"names":["React","Component","connect","Router","parseCookies","Script","ReviewCard","Layout","Spinner","SearchBar","AddReviewForm","appActions","authActions","App","props","address","modalVisible","searchInitiated","addressError","options","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address_components","setState","city","long_name","query","formatted_address","input","valid","isValidatePostalCode","addDash","length","slice","toUpperCase","val","split","counter","forEach","element","index","isNaN","test","event","findByAddress","userToken","state","savedToken","replace","updateSavedToken","cards","emptyResultsText","searchResults","map","id","styles","noResultsStyle","spinner","loading","showModalHandle","handleScriptLoad","hideModalHandle","sectionStyle","headerStyle","searchByAddressHandler","errorStyle","searchHeading","width","req","cookie","marginTop","fontSize","color","textAlign","fontFamily","fontWeight","overflowY","alignSelf","padding","mapStateToProps","auth","app","mapDispatchToProps","dispatch","token","findReviewByAddress"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from \"react-redux\"\nimport Router from \"next/router\"\nimport {parseCookies} from \"../lib/parseCookies\"\nimport Script from 'react-load-script';\n\nimport {ReviewCard, Layout, Spinner, SearchBar } from \"../src/components\"\nimport AddReviewForm from \"../src/modal/addReviewForm\"\nimport * as appActions from \"../store/actions/appActions\"\nimport * as authActions from \"../store/actions/authActions\"\n\nclass App extends Component {\n  static getInitialProps=({req})=>{\n    const cookie = parseCookies(req)\n    return {\n      savedToken: cookie.userToken\n    }\n  }\n\n  constructor(props){\n    super(props)\n  }\n\n  componentDidMount(){\n    if(!this.props.savedToken){\n      Router.replace(\"/auth\")\n    }else{\n      this.props.updateSavedToken(this.props.savedToken)\n    }\n  }\n\n  state = {\n    address: \"\",\n    modalVisible: false,\n    searchInitiated: false, //used as flag to check if user has attempted searching if so show no result \n    addressError:false,\n  };\n\n  handleScriptLoad=()=>{\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {\n      // types: ['(cities)'],\n    };\n\n    // Initialize Google Autocomplete\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n\n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    this.autocomplete.setFields(['address_components']);\n\n    // Fire Event when a suggested name is selected\n    this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n  }\n\n  handlePlaceSelect=()=> {\n    // Extract City From Address Object\n    let addressObject = this.autocomplete.getPlace();\n    let address = addressObject.address_components;\n\n    // Check if address is valid\n    if (address) {\n      // Set State\n      this.setState(\n        {\n          city: address[0].long_name,\n          query: addressObject.formatted_address,\n        }\n      );\n    }\n  }\n\n  onAddressChangeHandler = input => {\n    //handles user input and stores in local state\n    const valid = this.isValidatePostalCode(input)\n      if(valid){\n      const addDash = input.length===3 ? `${input.slice(0,3)}-${input.slice(3)}`:input\n      this.setState({\n       addressError:false,\n       address: addDash.toUpperCase()\n    })\n    return\n    }\n    this.setState({addressError:!valid})\n  };\n\n  isValidatePostalCode=(input)=>{\n    // validates the postal code to fit canadian format of X1X-X1X\n    const val = input.split(\"\") //storing the values in array\n    let valid = true\n    let counter = 0\n    val.forEach((element,index)=>{\n      /******\n        counter used to keep track of spaces where value should be digit\n        even array index is alphabetic character and odd is numeric\n        counter is not incremented after 3 so as to add dash which is not counted\n      ******/\n      if((counter % 2) !== 0){\n        if(element === \"-\"){\n          return\n        }else{\n          counter++\n          valid = valid && !isNaN(parseInt(element)) \n        }    \n      }else{\n        counter++\n        // validates the strings are in the right place by canadian postal code format\n        valid = valid && /^[A-Za-z\\-]/.test(element)\n      }\n    })\n    return valid\n  }\n  searchByAddressHandler = event => {\n    this.props.findByAddress(this.props.userToken, this.state.address)\n  }\n\n  showModalHandle=()=>{\n    this.setState({modalVisible: true})\n  }\n\n  hideModalHandle=()=>{\n    this.setState({modalVisible: false})\n  } \n  render() {\n    let cards = null\n    /**\n     *  emptyResultsText: this is used to display feedback when empty list returned.\n     *  display of this warning is handled by state.showEmptyResultsWarning flag\n     * */ \n    let emptyResultsText = \"\"\n    if(this.props.searchResults !== null && this.props.searchResults.length > 0){\n      cards= this.props.searchResults ? this.props.searchResults.map(element=><ReviewCard data={element} key={element.id} />): null\n    }else if(this.props.searchResults){\n      /*** this handle the empty array case where no results where found**/ \n      if(this.props.searchResults.length === 0){\n        emptyResultsText = <p style={styles.noResultsStyle}>Currently no reviews exist for this postal code</p>\n      }\n    }\n    const spinner = !this.props.loading ? null : <Spinner />;\n    /***  showModal handle is passed down to Layout ***/\n    return (\n      <Layout showModalHandle={this.showModalHandle}>\n        {/* loading google maps script */}\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n            onLoad={this.handleScriptLoad}\n          />   \n        <AddReviewForm \n            userToken={this.props.userToken}\n            modalVisible={this.state.modalVisible}\n            hideModalHandle={this.hideModalHandle}>\n        </AddReviewForm>\n        <section style={styles.sectionStyle}>\n        <h2 style={styles.headerStyle}>\n            Because not all landlords are built the same\n          </h2>\n          <SearchBar\n            id=\"autocomplete\"\n            invalid={this.state.addressError ? true : false}\n            placeholder=\"X5X-X5X\"\n            value={this.state.address}\n            // onChange={this.onAddressChangeHandler}\n            onRequestSearch={this.searchByAddressHandler}\n          />\n          <p style={styles.errorStyle}> {this.state.addressError ? \"Acceptable format is X9X-9X9\" : \"\"} </p>\n          <p style={styles.searchHeading}>Search for reviews by Postal Code</p>\n          {spinner}\n          {emptyResultsText}\n        <div style={{ width:\"100%\"}}>{cards}</div>\n        </section>            \n      </Layout>\n    );\n  }\n}\n\nconst styles = {\n  headerStyle:{\n    marginTop:\"80px\",\n    fontSize: 22,\n    color: \"rgb(44,54,94)\",\n    textAlign: \"center\",\n    fontFamily:'Poppins, sans-serif',\n    fontWeight:\"bold\"\n  },\n  sectionStyle:{\n    overflowY:\"scroll\",\n    alignSelf:\"center\",\n    marginTop:\"5px\",\n    padding: \"20px\",\n    textAlign: \"center\",\n    width:\"100%\"\n  },\n  searchHeading:{\n    fontSize:16,\n    marginTop:20,\n    color: \"rgb(44,54,94)\", \n    fontWeight:\"bold\",\n    fontFamily:\"Poppins, sans serif\"\n  },\n  errorStyle:{\n    color:\"rgb(255,89,65)\",\n    fontWeight:\"bold\",\n    fontFamily:\"Poppins, sans serif\"\n  },\n  noResultsStyle:{\n    color:\"rgb(255,89,65)\",\n    fontSize:20,\n    fontWeight:\"bold\",\n    fontFamily:\"Fira Sans, sans serif\"\n  }\n};\n\nconst mapStateToProps=(state)=>{\n  return{\n    userToken: state.auth.userToken,\n    searchResults:state.app.searchResults,\n    loading: state.app.loading\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    updateSavedToken:(token)=>dispatch(authActions.updateSavedToken(token)),\n    findByAddress:(userToken,address)=>dispatch(appActions.findReviewByAddress(userToken,address))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}