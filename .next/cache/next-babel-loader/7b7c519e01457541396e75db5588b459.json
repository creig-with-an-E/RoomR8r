{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from \"react\";\n\nvar googlePlaceFunctions =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(googlePlaceFunctions, _Component);\n\n  function googlePlaceFunctions() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, googlePlaceFunctions);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(googlePlaceFunctions)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      address: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePlaceSelect\", function (autocomplete) {\n      // Extract City From Address Object\n      var addressObject = autocomplete.getPlace();\n      var address = addressObject.address_components; // Check if address is valid\n\n      if (address) {\n        _this.setState({\n          // city: address[0].long_name,\n          address: address\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  return googlePlaceFunctions;\n}(Component);\n\n_defineProperty(googlePlaceFunctions, \"handleScriptLoad\", function () {\n  /***loads google script on load */\n  // Declare Options For Autocomplete\n  var options = {\n    // types: ['(cities)'],\n    componentRestrictions: {\n      country: 'ca'\n    }\n  }; // Initialize Google Autocomplete\n\n  var autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'), options); // Avoid paying for data that you don't need by restricting the set of\n  // place fields that are returned to just the address components.\n\n  autocomplete.setFields(['address_components']); // Fire Event when a suggested name is selected\n\n  autocomplete.addListener('place_changed', function () {\n    return googlePlaceFunctions.handlePlaceSelect(autocomplete);\n  });\n});\n\nexport default googlePlaceFunctions;","map":{"version":3,"sources":["/Users/fortunephiri/Documents/Projects/roomR8r/lib/googlePlaceFunctions.js"],"names":["React","Component","googlePlaceFunctions","address","autocomplete","addressObject","getPlace","address_components","setState","options","componentRestrictions","country","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;;IAEMC,oB;;;;;;;;;;;;;;;;;;4DACE;AACJC,MAAAA,OAAO,EAAC;AADJ,K;;wEAyBY,UAACC,YAAD,EAAgB;AAChC;AACA,UAAIC,aAAa,GAAGD,YAAY,CAACE,QAAb,EAApB;AACA,UAAIH,OAAO,GAAGE,aAAa,CAACE,kBAA5B,CAHgC,CAKhC;;AACA,UAAIJ,OAAJ,EAAa;AACX,cAAKK,QAAL,CACA;AACE;AACAL,UAAAA,OAAO,EAAEA;AAFX,SADA;AAMD;AACA,K;;;;;;EAxC8BF,S;;gBAA7BC,oB,sBAKoB,YAAI;AAC1B;AACA;AACA,MAAMO,OAAO,GAAG;AACd;AACAC,IAAAA,qBAAqB,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAFT,GAAhB,CAH0B,CAO1B;;AACC,MAAMP,YAAY,GAAG,IAAIQ,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,YAAvB,CACpBC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CADoB,EAEpBR,OAFoB,CAArB,CARyB,CAa1B;AACA;;AACAL,EAAAA,YAAY,CAACc,SAAb,CAAuB,CAAC,oBAAD,CAAvB,EAf0B,CAiB1B;;AACAd,EAAAA,YAAY,CAACe,WAAb,CAAyB,eAAzB,EAA0C;AAAA,WAvBxCjB,oBAuB4C,CAAKkB,iBAAL,CAAuBhB,YAAvB,CAAJ;AAAA,GAA1C;AACC,C;;AAmBL,eAAeF,oBAAf","sourcesContent":["import React,{Component} from \"react\"\n\nclass googlePlaceFunctions extends Component {\n  state={\n    address:{}\n  }\n\n  static handleScriptLoad=()=>{\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.setState(\n      {\n        // city: address[0].long_name,\n        address: address,\n      }\n      );\n    }\n    }\n}\n\nexport default googlePlaceFunctions"]},"metadata":{},"sourceType":"module"}