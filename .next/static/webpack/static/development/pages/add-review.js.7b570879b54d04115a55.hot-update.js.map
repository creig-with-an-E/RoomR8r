{"version":3,"file":"static/webpack/static/development/pages/add-review.js.7b570879b54d04115a55.hot-update.js","sources":["webpack:///./src/stepper/stepper_components/landlord_form.js","webpack:///./store/actions/appActions.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport {connect} from \"react-redux\"\n\nimport {setFormFields} from \"../../../store/actions/appActions\"\n\nclass LandlordForm extends Component {\n  state = {\n    landlord_review: \"\",\n    name: \"\"\n  };\n\n  landLordformSubmitHandle = event => {\n    event.preventDefault(); //preventing page refresh\n    this.props.updateFields(this.state)\n  };\n\n  onChangeText = (event) => {\n    /* handles input change for the form*/\n    const {name,value} = event.target\n    this.setState({\n      [name]: value\n    });\n  }\n\n  componentDidMount(){\n    const {landlord_review,name} = this.props.landlord_bio\n    /** auto populating fields if user had started input*/ \n    this.setState({ landlord_review,name })\n  }\n  render() {\n    return (\n        <form onSubmit={this.landLordformSubmitHandle}>\n          <input\n            placeholder=\"John Doe\"\n            type=\"text\" style={styles.inputStyle}\n            name=\"name\"\n            onChange={this.onChangeText}\n          />\n          <textarea\n            placeholder=\"bio\" onChange={this.onChangeText}\n            name=\"landlord_review\"\n            cols=\"10\" rows=\"6\"\n            style={styles.inputStyle}\n          />\n        </form>\n    );\n  }\n}\nconst styles = {\n  inputStyle: {\n    padding: 15,\n    width: \"300px\",\n    borderRadius: 7,\n    fontSize: 14,\n    marginTop: \"10px\",\n    marginBottom: \"10px\",\n    display: \"block\"\n  }\n};\n\nconst mapStateToProps=(state)=>{\n  return{\n    landlord_bio:state.stepperFormData.landlord_bio\n  }\n}\n\nconst mapDispatchTopProps=(dispatch)=>{\n  return{\n    updateFields:(data)=>dispatch(setFormFields(data))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchTopProps)(LandlordForm)\n","import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\"\n\nconst findByAddressStart=()=>{\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return {type: actionTypes.SEARCH_BY_ADDRESS_START}\n}\n\nconst findByAddressSuccess=(response)=>{\n  // iterating over response placing id as part of object\n  const arrayData = Object.keys(response.data).map(key => {\n    return { ...response.data[key], id: key };\n    });\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: { data:arrayData }\n  }\n}\n\nconst findByAddressFail=(error)=>{\n  return {\n    type:actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload:{ data: error }\n  }\n}\n\nexport const findReviewByAddress= (userToken,address) => {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  return (dispatch)=>{\n    dispatch(findByAddressStart())\n\n    /*** searchParametersPassed: if search parameter is blank it returns all results\n     *   in the event parameter is passed, it returns relevant postal code results\n    */\n    const searchParametersPassed = address ?`&orderBy=\"postal_code\"&startAt=\"${address}\"&endAt=\"${\n      address }\"` :\"\"\n    axios.get(`https://accomo-rater.firebaseio.com/landlord_data.json?auth=${\n      userToken}${searchParametersPassed}`\n    )\n    .then(response => {\n      dispatch(findByAddressSuccess(response))\n    })\n    .catch(error => {\n      dispatch(findByAddressFail(error))\n    });\n  }\n  };\n\n  /** resetting state */\n\n  export const resetApplicationState=()=>{\n    return{\n      type: actionTypes.RESET_APPLICATION_STATE\n    }\n  }\n\n/**functions for google maps auto complete */\nexport const setAddress=(address)=>{\n  return {\n    type: actionTypes.SET_ADDRESS_OBJECT,\n    payload: address\n  }\n}\n\n/*******end of google maps functions********/ \n\n/**start of review form functions**********/ \nexport const setFormFields=(data)=>{\n  return {\n    type: actionTypes.SET_REVIEW_FORM_FIELDS,\n    payload: data\n  }\n}\n\n/*************end of review form data***************************/ "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AAGA;AACA;;;;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AACA;AACA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAzCA;AACA;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AACA;AAWA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;A","sourceRoot":""}