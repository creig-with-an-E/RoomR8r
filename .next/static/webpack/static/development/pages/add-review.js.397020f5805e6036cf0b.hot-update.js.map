{"version":3,"file":"static/webpack/static/development/pages/add-review.js.397020f5805e6036cf0b.hot-update.js","sources":["webpack:///./src/stepper/googleMapsSearchBar.js"],"sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../components\"\nimport Script from \"react-load-script\"\nimport {connect} from \"react-redux\"\n\nimport {setAddress} from \"../../store/actions/appActions\"\n\nclass GoogleMapsSearchBar extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      queryString:\"\",\n      address:{}\n    }\n  }\n  /******start of google maps functions */\n\n  handleScriptLoad=()=>{\n    /***loads google script on load and \n     * declares the options for autocomplete */\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}  //setting results to canada\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.props.setAddressData(address)\n      this.setState(\n      {\n        // city: address[0].long_name,\n        address: address, //setting address with address component\n      }\n      );\n    }\n  }\n  /** end of google maps functions ************/\n  componentDidUpdate(prevProps,prevState){\n    if(this.props.addressData !== prevProps.addressData){\n      this.setState({\n        address: addressData\n      })\n    }\n  }\n\n  onChangeHandler=(input)=>{\n    this.setState({queryString:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={this.handleScriptLoad}\n        />\n        <SearchBar\n          style={{backgroundColor:\"#ddd\"}}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.queryString}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps=(state)=>{\n  return{\n    addressData: state.app.addressData\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    setAddressData:(address)=>dispatch(setAddress(address))\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(GoogleMapsSearchBar)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;;AAEA;AACA;AACA;AAAA;AACA;AADA;AAFA;AACA;AAIA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA9CA;AAwDA;AAAA;AAAA;AACA;AACA;AAxDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;AACA;AACA;;;;AAqCA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;;;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA3EA;AACA;AA6EA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;;;;A","sourceRoot":""}