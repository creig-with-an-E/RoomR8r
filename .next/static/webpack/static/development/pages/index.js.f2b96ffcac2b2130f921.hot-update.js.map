{"version":3,"file":"static/webpack/static/development/pages/index.js.f2b96ffcac2b2130f921.hot-update.js","sources":["webpack:///./src/stepper/googleMapsSearchBar.js","webpack:///./store/actions/actionTypes.js","webpack:///./store/actions/appActions.js"],"sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../components\"\nimport Script from \"react-load-script\"\nimport {connect} from \"react-redux\"\n// import googleMapsFunctions from \"../../lib/googlePlaceFunctions\"\n\nclass GoogleMapsSearchBar extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      queryString:\"\",\n      address:{}\n    }\n  }\n  /******start of google maps functions */\n\n  handleScriptLoad=()=>{\n    /***loads google script on load and \n     * declares the options for autocomplete */\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}  //setting results to canada\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.setState(\n      {\n        // city: address[0].long_name,\n        address: address, //setting address with address component\n      }\n      );\n    }\n  }\n  /** end of google maps functions ************/\n\n  onChangeHandler=(input)=>{\n    this.setState({queryString:input})\n  }\n\n  render(){\n    console.log(this.state)\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={this.handleScriptLoad}\n        />\n        <SearchBar\n          style={{backgroundColor:\"#ddd\"}}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.queryString}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps=(state)=>{\n  return{\n    addressData: state.appReducer.addressData\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    setAddressData:(address)=>dispatch(setAddress(address))\n  }\n}\nexport default connect(mapStateToProps)(GoogleMapsSearchBar)","export const LOGIN_START = \"login_start\"\nexport const LOGIN_SUCCESS = \"login_success\"\nexport const LOGIN_FAIL =\"login_fail\"\nexport const LOGOUT_USER=\"logout_user\"\nexport const CLEAR_ERRORS =\"clear_errors\"\n\nexport const SIGNUP_USER=\"signup_user\"\nexport const SIGNUP_USER_SUCCESS = \"signup_user_success\"\nexport const SIGNUP_USER_FAIL = \"sign_user_fail\"\n//**  app action types ****//\nexport const SEARCH_BY_ADDRESS_START = \"search_by_address_start\"\nexport const SEARCH_BY_ADDRESS_SUCCESS = \"search_by_address_success\"\nexport const SEARCH_BY_ADDRESS_FAIL = \"search_by_address_fail\"\nexport const RESET_APPLICATION_STATE = \"reset_application_state\"\n\nexport const SET_ADDRESS_OBJECT = \"set_address_object\"\n\nexport const UPDATE_TOKEN_WITH_COOKIE = \"update_user_token_with_cookie_value\"","import axios from \"axios\";\nimport * as actionTypes from \"./actionTypes\"\n\nconst findByAddressStart=()=>{\n  // called when findReviewByAddress starts\n  // params: \n  // return:\n  return {type: actionTypes.SEARCH_BY_ADDRESS_START}\n}\n\nconst findByAddressSuccess=(response)=>{\n  // iterating over response placing id as part of object\n  const arrayData = Object.keys(response.data).map(key => {\n    return { ...response.data[key], id: key };\n    });\n  return {\n    type: actionTypes.SEARCH_BY_ADDRESS_SUCCESS,\n    payload: { data:arrayData }\n  }\n}\n\nconst findByAddressFail=(error)=>{\n  return {\n    type:actionTypes.SEARCH_BY_ADDRESS_FAIL,\n    payload:{ data: error }\n  }\n}\n\nexport const findReviewByAddress= (userToken,address) => {\n  // fetches reviews from firebase\n  // return: array of objects\n  // params: userToken passed from authState and address \n  return (dispatch)=>{\n    dispatch(findByAddressStart())\n\n    /*** searchParametersPassed: if search parameter is blank it returns all results\n     *   in the event parameter is passed, it returns relevant postal code results\n    */\n    const searchParametersPassed = address ?`&orderBy=\"postal_code\"&startAt=\"${address}\"&endAt=\"${\n      address }\"` :\"\"\n    axios.get(`https://accomo-rater.firebaseio.com/landlord_data.json?auth=${\n      userToken}${searchParametersPassed}`\n    )\n    .then(response => {\n      dispatch(findByAddressSuccess(response))\n    })\n    .catch(error => {\n      dispatch(findByAddressFail(error))\n    });\n  }\n  };\n\n  /** resetting state */\n\n  export const resetApplicationState=()=>{\n    return{\n      type: actionTypes.RESET_APPLICATION_STATE\n    }\n  }\n\n/**functions for google maps auto complete */\nexport const setAddress=(address)=>{\n  return {\n    type: actionTypes.SET_ADDRESS_OBJECT,\n    payload: address\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;;AAEA;AACA;AACA;AAAA;AACA;AADA;AAFA;AACA;AAIA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAHA;AAKA;AACA;AACA;AA7CA;AAgDA;AAAA;AAAA;AACA;AACA;AAhDA;AACA;AACA;AAFA;AAFA;AAMA;AACA;AACA;AACA;;;AA0CA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AApEA;AACA;AAsEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AAAA;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;;;;A","sourceRoot":""}