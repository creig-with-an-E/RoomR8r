{"version":3,"file":"static/webpack/static/development/pages/addreview.js.ca1dc03645323ade4fb6.hot-update.js","sources":["webpack:///./lib/googlePlaceFunctions.js","webpack:///./src/stepper/googleMapsSearchBar.js"],"sourcesContent":["export default class MapFunctions {\n  handleScriptLoad=()=>{\n    /***loads google script on load */\n    // Declare Options For Autocomplete\n    const options = {\n      // types: ['(cities)'],\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', handlePlaceSelect);\n    }\n    \n   handlePlaceSelect=()=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      console.log(address)\n      // this.setState(\n      // {\n      //   city: address[0].long_name,\n      // }\n      // );\n    }\n    }\n}\n","import React,{Component} from 'react';\n\nimport {SearchBar} from \"../components\"\nimport Script from \"react-load-script\"\nimport googleMapsFunctions from \"../../lib/googlePlaceFunctions\"\n\n// const handleScriptLoad=()=>{\n//   /***loads google script on load */\n//   // Declare Options For Autocomplete\n//   let options = {\n//     // types: ['(cities)'],\n//   };\n//   // Initialize Google Autocomplete\n//    let autocomplete = new google.maps.places.Autocomplete(\n//     document.getElementById('autocomplete'),\n//     options,\n//   );\n  \n//   // Avoid paying for data that you don't need by restricting the set of\n//   // place fields that are returned to just the address components.\n//   autocomplete.setFields(['address_components']);\n  \n//   // Fire Event when a suggested name is selected\n//   autocomplete.addListener('place_changed', handlePlaceSelect);\n//   }\n  \n// const handlePlaceSelect=()=>{\n//   // Extract City From Address Object\n//   let addressObject = autocomplete.getPlace();\n//   let address = addressObject.address_components;\n//   // Check if address is valid\n//   if (address) {\n//     console.log(address)\n//     // this.setState(\n//     // {\n//     //   city: address[0].long_name,\n//     // }\n//     // );\n//   }\n// }\n\nclass GoogleMapsSearchBar extends Component{\n  state ={\n      address:\"\"\n  }\n  onChangeHandler=(input)=>{\n    this.setState({address:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={googleMapsFunctions.handleScriptLoad}\n        />\n        <SearchBar\n          style={{backgroundColor:\"#ddd\"}}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.address}\n        />\n      </div>)\n  }\n}\n\nexport default GoogleMapsSearchBar"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAMA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAvBA;AACA;AAyBA;;;;A","sourceRoot":""}