{"version":3,"file":"static/webpack/static/development/pages/add-review.js.3c4c0d9c3a754f8750dc.hot-update.js","sources":["webpack:///./src/stepper/stepper_components/googleMapsSearchBar.js"],"sourcesContent":["import React,{Component} from 'react';\n\nimport {SearchBar} from \"../../components\"\nimport Script from \"react-load-script\"\nimport {connect} from \"react-redux\"\n\nimport {setAddress,resetApplicationState} from \"../../../store/actions/appActions\"\n\nclass GoogleMapsSearchBar extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      queryString:\"\",\n    }\n    this.props.resetState()\n  }\n  componentDidMount(){\n    if(this.props.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  componentDidUpdate(prevProps,prevState){\n    // return\n    if(this.props.addressData !== prevProps.addressData){\n      const {street_number, city, province} =this.props.addressData\n      this.setState({\n        address: this.props.addressData,\n        queryString:`${street_number},${city},${province}`\n      })\n    }\n  }\n\n  /******start of google maps functions */\n  handleScriptLoad=()=>{\n    /***loads google script on load and \n     * declares the options for autocomplete */\n    const options = {\n      // types: ['(cities)'],\n      componentRestrictions: {country: 'ca'}  //setting results to canada\n    };\n    // Initialize Google Autocomplete\n     const autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById('autocomplete'),\n      options,\n    );\n    \n    // Avoid paying for data that you don't need by restricting the set of\n    // place fields that are returned to just the address components.\n    autocomplete.setFields(['address_components']);\n    \n    // Fire Event when a suggested name is selected\n    autocomplete.addListener('place_changed', ()=>this.handlePlaceSelect(autocomplete))\n    }\n    \n  handlePlaceSelect=(autocomplete)=>{\n    // Extract City From Address Object\n    let addressObject = autocomplete.getPlace();\n    let address = addressObject.address_components;\n    \n    // Check if address is valid\n    if (address) {\n      this.props.setAddressData(address)\n    }\n  }\n  /** end of google maps functions ************/\n\n  onChangeHandler=(input, name=null)=>{\n    /** handles the input change in search bar*/ \n    this.setState({queryString:input})\n  }\n\n  render(){\n    return(\n      <div>\n        <Script\n          url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBWcDVGfs8R5EmWbh9xsuYEHycoqDyDf9I&libraries=places\"\n          onLoad={this.handleScriptLoad}\n        />\n        <SearchBar\n          style={styles.searchBar}\n          id=\"autocomplete\"\n          onChange={this.onChangeHandler}\n          placeholder=\"X5X-X5X\"\n          value={this.state.queryString}\n        />\n      </div>)\n  }\n}\n\nconst mapStateToProps=(state)=>{\n  return{\n    addressData: state.app.stepperFormData.addressData\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    setAddressData:(address)=>dispatch(setAddress(address)),\n    resetState:()=>dispatch(resetApplicationState())\n  }\n}\n\nconst styles ={\n  searchBar:{\n    backgroundColor:\"#fffffa\",\n    width:\"320px\"\n  }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(GoogleMapsSearchBar)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6BA;;AAEA;AACA;AACA;AAAA;AACA;AADA;AAFA;AACA;AAIA;AAMA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAhDA;AAkDA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AA3DA;AA6DA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AA/DA;AACA;AADA;AACA;AAEA;AACA;AANA;AAMA;AACA;;;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;;;AAsCA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAlFA;AACA;AAoFA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAFA;AADA;AAMA;;;;A","sourceRoot":""}