{"version":3,"file":"static/webpack/static/development/pages/index.js.707678e15186578c7b29.hot-update.js","sources":["webpack:///./src/stepper/index.js"],"sourcesContent":["import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport GMapsSearchBar from \"./googleMapsSearchBar\"\n\nconst styles = theme => ({\n  root: {\n    // width: \"90%\"\n  },\n  button: {\n    marginRight: theme.spacing.unit,\n    \"& $disabled\":{\n      backgroundColor:\"red\"\n    },\n\n  },\n  step: {\n\n  },\n  stepIcon:{\n    color:\"#FF5941\"\n  },\n  completed:{}\n});\n\n\nconst getSteps=()=>{\n  return ['Location settings', 'Add land lord details', 'Verify details'];\n}\n\nconst getStepContent=(step, address= \"\")=>{\n  switch (step) {\n    case 0:\n      return (<GMapsSearchBar />)\n    case 1:\n      return 'What is an ad group anyways?';\n    case 2:\n      return 'This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nconst HorizontalStepper=(props)=>{\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const [address, setAddress] = React.useState(\"\")\n\n  \n\n  const steps = getSteps();\n\n  function isStepOptional(step) {\n    return step === null;\n  }\n\n  function isStepSkipped(step) {\n    return skipped.has(step);\n  }\n\n  function handleNext() {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  }\n\n  function handleBack() {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  }\n\n  function handleSkip() {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  }\n\n  function handleReset() {\n    setActiveStep(0);\n  }\n\n  const { classes } = props;\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep} >\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n          if (isStepOptional(index)) {\n            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n          }\n          if (isStepSkipped(index)) {\n            stepProps.completed = false;\n          }\n          return (\n            <Step key={label} {...stepProps} classes={{\n              root: classes.step,\n              completed: classes.completed,\n              active: classes.active\n            }}>\n              <StepLabel {...labelProps} StepIconProps={{\n                  classes: { root: classes.stepIcon }\n                  }}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div style={{ height:300, display:\"flex\", alignItems: 'center', justifyContent:\"center\"}}>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className=\"instructions\">\n              Review complete.<a className={classes.completeButton} onClick={props.closeModal}>Close</a>\n            </Typography>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>{getStepContent(activeStep, address)}</Typography>\n            <div style={{marginTop:60, textAlign:\"center\"}}>\n              <Button style={{backgroundColor:\"#ccc\"}} disabled={activeStep === 0}  onClick={handleBack} className={classes.button} color=\"primary\">\n                Back\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(HorizontalStepper)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AADA;AAFA;AAOA;AAGA;AACA;AADA;AAGA;AAjBA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AAocA;AACA;AACA;;;;A","sourceRoot":""}